url1 <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url2 <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url1)
testing <- read.csv(url2)
names(training)
head(training)
View(training)
summary(training$classe)
?exists
exists(training)
dim(training)
summary(training)
library(caret)
library(ggplot2)
modelFit <- train(training$classe ~ ., method = "glm", preProcess = "pca", data = training)
set.seed(1234)
modelFit1 <- train(classe ~ ., data = training, method = "glm")
warnings()
featurePlot(x = training[, c("roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell")], y = training$classe, plot = "pairs")
qplot(training$classe)
qplot(training$classe, training$roll_belt)
qplot(training$classe, training$pitch_belt)
qplot(training$classe, training$yaw_belt)
qplot(training$classe, training$total_accel_belt)
qplot(training$classe, training$user_name)
qplot(training$classe, training$gyros_belt_x)
qplot(training$classe, training$gyros_belt_y)
qplot(training$classe, training$gyros_belt_y, geom = "jitter")
qplot(training$classe, training$gyros_belt_y, geom = "boxplot")
qplot(training$classe, training$gyros_belt_z, geom = "boxplot")
qplot(training$classe, training$gyros_belt_z, geom = c("boxplot", "jitter"))
qplot(training$classe, training$gyros_belt_y, geom = "jitter")
qplot(training$classe, training$gyros_belt_z, geom = "jitter")
qplot(training$classe, training$gyros_belt_x, geom = "jitter")
qplot(training$classe, training$roll_arm, geom = "jitter")
qplot(training$classe, training$pitch_arm, geom = "jitter")
qplot(training$classe, training$pitch_arm, geom = "boxplot")
qplot(training$classe, training$yaw_arm, geom = "boxplot")
qplot(training$classe, training$total_accel_arm, geom = "boxplot")
qplot(training$classe, training$total_accel_arm, geom = "jitter")
qplot(training$classe, training$gyros_arm_x, geom = "jitter")
qplot(training$classe, training$gyros_arm_x, geom = "boxplot")
qplot(training$classe, training$gyros_arm_y, geom = "boxplot")
qplot(training$classe, training$gyros_arm_z, geom = "boxplot")
qplot(training$classe, training$roll_dumbbell, geom = "boxplot")
qplot(training$classe, training$pitch_dumbbell, geom = "boxplot")
qplot(training$classe, training$yaw_dumbbell, geom = "boxplot")
class(training)
class(training$names)
str(training)
summary(training$max_roll_arm)
qplot(training$classe, training$max_roll_arm, geom = "boxplot")
table(training$classe, training$max_roll_arm)
dim(training)
summary(training$classe)
str(training)
summary(training$max_picth_dumbbell)
table(training$classe, training$user_name)
?caret
require(caret)
require(ggplot2)
set.seed(1234)
?caret
?preProcess
preProcess(training, method = "pca", thresh = 0.9, outcome = "training$classe")
require(dplyr)
colnames(training)
class(training$user_name)
sapply(training, class)
factors <- sapply(training, class)
View(factors)
factors <- as.dataframe(sapply(training, class))
factors <- as.data.frame(sapply(training, class))
View(factors)
str(factors)
table(factors)
View(factors)
str(training$X)
require(caret)
require(ggplot2)
require(dplyr)
set.seed(1234)
select(training, -X:num_window)
select(training, roll_belt:classe)
training <- select(training, roll_belt:classe)
training <- mutate_each(training, funs(as.numeric(as.character())), -classe)
?mutate_each
training <- mutate_each(training, funs(as.numeric, as.character), -classe)
training <- read.csv(url1)
training <- select(training, roll_belt:classe)
training <- mutate_each(training, funs(as.character), -classe)
str(training)
training <- mutate_each(training, funs(as.numeric), -classe)
warnings()
str(training)
str(training$classe)
model1 <- train(training$classe ~ ., method = "glm", preProcess = "pca", data = training)
?train
model1 <- train(training$classe ~ ., method = "glm", preProcess = "pca", na.omit = "TRUE", data = training)
model1 <- train(training$classe ~ ., method = "glm", preProcess = "pca", na.action = na.omit, data = training)
preProcess(training, method = "knnImpute")
preProcess(training[,1:152], method = "knnImpute")
preObj <- preProcess(training[, 1:152], method = "knnImpute")
training[,1:152] <- predict(preObj, training[, 1:152])
view(training)
View(training)
cor(training)
cor(training[,1:152])
findCorrelation(training)
findCorrelation(training[,1:152])
?upper.tri
trainingCor <- findCorrelation(training[,1:152])
summary(trainingCor)
pp_training <- preProcess(training[,-153], method = "pca")
training <- training[, sd(training)!=0]
names(training[, sapply(training, function(v) var(v, na.rm=TRUE)==0)])
?var
sapply(training, var)
summary(training$var_roll_forearm)
mean(training$gyros_arm_x)
means <- sapply(training, mean)
View(means)
means <- as.data.frame(sapply(training, mean))
?colSums
training <- training[, colSums(is.na(training)) != nrow(training)]
View(training)
means <- as.data.frame(sapply(training, mean))
View(means)
summary(training$kurtosis_roll_belt)
model1 <- train(training$classe ~ ., method = "glm", preProcess = "pca", data = training)
training <- read.csv(url1)
training <- select(training, roll_belt:classe)
training <- training[, colSums(is.na(training)) != nrow(training)]
training <- read.csv(url1)
classes <- as.data.frame(sapply(training, class))
str(classes)
table(classes)
#Discard unnecessary variables
trainingMod <- select(training, roll_belt:classe)
dim(trainingMod)
dim(training)
#Discard 100% NA variables
trainingMod <- trainingMod[, colSums(is.na(trainingMod)) != nrow(trainingMod)]
dim(trainingMod)
#Convert all variables to numeric, except classe
trainingMod <- mutate_each(training, funs(as.character), -classe)
trainingMod <- mutate_each(training, funs(as.numeric), -classe)
#Discard unnecessary variables
trainingMod <- select(training, roll_belt:classe)
dim(trainingMod)
#Convert all variables to numeric, except classe
trainingMod <- mutate_each(trainingMod, funs(as.character), -classe)
trainingMod <- mutate_each(trainingMod, funs(as.numeric), -classe)
classes <- as.data.frame(sapply(training, class))
str(classes)
table(classes)
classesMod <- as.data.frame(sapply(trainingMod, class))
str(classesMod)
table(classesMod)
preProcess(trainingMod[, -153]), method = "knnImpute"
preProcess(trainingMod[, -153], method = "knnImpute")
var(trainingMod$amplitude_yaw_belt)
summary(trainingMod$amplitude_yaw_belt)
preProcess(trainingMod[, -153], method = "knnImpute", na.action = na.pass)
